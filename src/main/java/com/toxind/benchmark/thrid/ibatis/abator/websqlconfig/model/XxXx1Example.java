package com.toxind.benchmark.thrid.ibatis.abator.websqlconfig.model;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class XxXx1Example {
    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database table TIANXUAN.XX_XX_1
     *
     * @abatorgenerated Thu Feb 16 11:17:50 CST 2012
     */
    protected String orderByClause;

    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database table TIANXUAN.XX_XX_1
     *
     * @abatorgenerated Thu Feb 16 11:17:50 CST 2012
     */
    protected List oredCriteria;

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table TIANXUAN.XX_XX_1
     *
     * @abatorgenerated Thu Feb 16 11:17:50 CST 2012
     */
    public XxXx1Example() {
        oredCriteria = new ArrayList();
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table TIANXUAN.XX_XX_1
     *
     * @abatorgenerated Thu Feb 16 11:17:50 CST 2012
     */
    protected XxXx1Example(XxXx1Example example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table TIANXUAN.XX_XX_1
     *
     * @abatorgenerated Thu Feb 16 11:17:50 CST 2012
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table TIANXUAN.XX_XX_1
     *
     * @abatorgenerated Thu Feb 16 11:17:50 CST 2012
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table TIANXUAN.XX_XX_1
     *
     * @abatorgenerated Thu Feb 16 11:17:50 CST 2012
     */
    public List getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table TIANXUAN.XX_XX_1
     *
     * @abatorgenerated Thu Feb 16 11:17:50 CST 2012
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table TIANXUAN.XX_XX_1
     *
     * @abatorgenerated Thu Feb 16 11:17:50 CST 2012
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table TIANXUAN.XX_XX_1
     *
     * @abatorgenerated Thu Feb 16 11:17:50 CST 2012
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table TIANXUAN.XX_XX_1
     *
     * @abatorgenerated Thu Feb 16 11:17:50 CST 2012
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Abator for iBATIS.
     * This class corresponds to the database table TIANXUAN.XX_XX_1
     *
     * @abatorgenerated Thu Feb 16 11:17:50 CST 2012
     */
    public static class Criteria {
        protected List criteriaWithoutValue;

        protected List criteriaWithSingleValue;

        protected List criteriaWithListValue;

        protected List criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList();
            criteriaWithSingleValue = new ArrayList();
            criteriaWithListValue = new ArrayList();
            criteriaWithBetweenValue = new ArrayList();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List list = new ArrayList();
            list.add(value1);
            list.add(value2);
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andAIsNull() {
            addCriterion("A is null");
            return this;
        }

        public Criteria andAIsNotNull() {
            addCriterion("A is not null");
            return this;
        }

        public Criteria andAEqualTo(BigDecimal value) {
            addCriterion("A =", value, "a");
            return this;
        }

        public Criteria andANotEqualTo(BigDecimal value) {
            addCriterion("A <>", value, "a");
            return this;
        }

        public Criteria andAGreaterThan(BigDecimal value) {
            addCriterion("A >", value, "a");
            return this;
        }

        public Criteria andAGreaterThanOrEqualTo(BigDecimal value) {
            addCriterion("A >=", value, "a");
            return this;
        }

        public Criteria andALessThan(BigDecimal value) {
            addCriterion("A <", value, "a");
            return this;
        }

        public Criteria andALessThanOrEqualTo(BigDecimal value) {
            addCriterion("A <=", value, "a");
            return this;
        }

        public Criteria andAIn(List values) {
            addCriterion("A in", values, "a");
            return this;
        }

        public Criteria andANotIn(List values) {
            addCriterion("A not in", values, "a");
            return this;
        }

        public Criteria andABetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("A between", value1, value2, "a");
            return this;
        }

        public Criteria andANotBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("A not between", value1, value2, "a");
            return this;
        }

        public Criteria andBIsNull() {
            addCriterion("B is null");
            return this;
        }

        public Criteria andBIsNotNull() {
            addCriterion("B is not null");
            return this;
        }

        public Criteria andBEqualTo(String value) {
            addCriterion("B =", value, "b");
            return this;
        }

        public Criteria andBNotEqualTo(String value) {
            addCriterion("B <>", value, "b");
            return this;
        }

        public Criteria andBGreaterThan(String value) {
            addCriterion("B >", value, "b");
            return this;
        }

        public Criteria andBGreaterThanOrEqualTo(String value) {
            addCriterion("B >=", value, "b");
            return this;
        }

        public Criteria andBLessThan(String value) {
            addCriterion("B <", value, "b");
            return this;
        }

        public Criteria andBLessThanOrEqualTo(String value) {
            addCriterion("B <=", value, "b");
            return this;
        }

        public Criteria andBLike(String value) {
            addCriterion("B like", value, "b");
            return this;
        }

        public Criteria andBNotLike(String value) {
            addCriterion("B not like", value, "b");
            return this;
        }

        public Criteria andBIn(List values) {
            addCriterion("B in", values, "b");
            return this;
        }

        public Criteria andBNotIn(List values) {
            addCriterion("B not in", values, "b");
            return this;
        }

        public Criteria andBBetween(String value1, String value2) {
            addCriterion("B between", value1, value2, "b");
            return this;
        }

        public Criteria andBNotBetween(String value1, String value2) {
            addCriterion("B not between", value1, value2, "b");
            return this;
        }

        public Criteria andCIsNull() {
            addCriterion("C is null");
            return this;
        }

        public Criteria andCIsNotNull() {
            addCriterion("C is not null");
            return this;
        }

        public Criteria andCEqualTo(Date value) {
            addCriterion("C =", value, "c");
            return this;
        }

        public Criteria andCNotEqualTo(Date value) {
            addCriterion("C <>", value, "c");
            return this;
        }

        public Criteria andCGreaterThan(Date value) {
            addCriterion("C >", value, "c");
            return this;
        }

        public Criteria andCGreaterThanOrEqualTo(Date value) {
            addCriterion("C >=", value, "c");
            return this;
        }

        public Criteria andCLessThan(Date value) {
            addCriterion("C <", value, "c");
            return this;
        }

        public Criteria andCLessThanOrEqualTo(Date value) {
            addCriterion("C <=", value, "c");
            return this;
        }

        public Criteria andCIn(List values) {
            addCriterion("C in", values, "c");
            return this;
        }

        public Criteria andCNotIn(List values) {
            addCriterion("C not in", values, "c");
            return this;
        }

        public Criteria andCBetween(Date value1, Date value2) {
            addCriterion("C between", value1, value2, "c");
            return this;
        }

        public Criteria andCNotBetween(Date value1, Date value2) {
            addCriterion("C not between", value1, value2, "c");
            return this;
        }

        public Criteria andDIsNull() {
            addCriterion("D is null");
            return this;
        }

        public Criteria andDIsNotNull() {
            addCriterion("D is not null");
            return this;
        }

        public Criteria andDEqualTo(String value) {
            addCriterion("D =", value, "d");
            return this;
        }

        public Criteria andDNotEqualTo(String value) {
            addCriterion("D <>", value, "d");
            return this;
        }

        public Criteria andDGreaterThan(String value) {
            addCriterion("D >", value, "d");
            return this;
        }

        public Criteria andDGreaterThanOrEqualTo(String value) {
            addCriterion("D >=", value, "d");
            return this;
        }

        public Criteria andDLessThan(String value) {
            addCriterion("D <", value, "d");
            return this;
        }

        public Criteria andDLessThanOrEqualTo(String value) {
            addCriterion("D <=", value, "d");
            return this;
        }

        public Criteria andDLike(String value) {
            addCriterion("D like", value, "d");
            return this;
        }

        public Criteria andDNotLike(String value) {
            addCriterion("D not like", value, "d");
            return this;
        }

        public Criteria andDIn(List values) {
            addCriterion("D in", values, "d");
            return this;
        }

        public Criteria andDNotIn(List values) {
            addCriterion("D not in", values, "d");
            return this;
        }

        public Criteria andDBetween(String value1, String value2) {
            addCriterion("D between", value1, value2, "d");
            return this;
        }

        public Criteria andDNotBetween(String value1, String value2) {
            addCriterion("D not between", value1, value2, "d");
            return this;
        }

        public Criteria andEIsNull() {
            addCriterion("E is null");
            return this;
        }

        public Criteria andEIsNotNull() {
            addCriterion("E is not null");
            return this;
        }

        public Criteria andEEqualTo(BigDecimal value) {
            addCriterion("E =", value, "e");
            return this;
        }

        public Criteria andENotEqualTo(BigDecimal value) {
            addCriterion("E <>", value, "e");
            return this;
        }

        public Criteria andEGreaterThan(BigDecimal value) {
            addCriterion("E >", value, "e");
            return this;
        }

        public Criteria andEGreaterThanOrEqualTo(BigDecimal value) {
            addCriterion("E >=", value, "e");
            return this;
        }

        public Criteria andELessThan(BigDecimal value) {
            addCriterion("E <", value, "e");
            return this;
        }

        public Criteria andELessThanOrEqualTo(BigDecimal value) {
            addCriterion("E <=", value, "e");
            return this;
        }

        public Criteria andEIn(List values) {
            addCriterion("E in", values, "e");
            return this;
        }

        public Criteria andENotIn(List values) {
            addCriterion("E not in", values, "e");
            return this;
        }

        public Criteria andEBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("E between", value1, value2, "e");
            return this;
        }

        public Criteria andENotBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("E not between", value1, value2, "e");
            return this;
        }
    }
}