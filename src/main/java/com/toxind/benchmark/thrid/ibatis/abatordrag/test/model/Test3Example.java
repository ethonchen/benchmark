package com.toxind.benchmark.thrid.ibatis.abatordrag.test.model;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class Test3Example {
    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database table test3
     *
     * @abatorgenerated Thu Feb 16 14:01:18 CST 2012
     */
    protected String orderByClause;

    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database table test3
     *
     * @abatorgenerated Thu Feb 16 14:01:18 CST 2012
     */
    protected List oredCriteria;

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table test3
     *
     * @abatorgenerated Thu Feb 16 14:01:18 CST 2012
     */
    public Test3Example() {
        oredCriteria = new ArrayList();
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table test3
     *
     * @abatorgenerated Thu Feb 16 14:01:18 CST 2012
     */
    protected Test3Example(Test3Example example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table test3
     *
     * @abatorgenerated Thu Feb 16 14:01:18 CST 2012
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table test3
     *
     * @abatorgenerated Thu Feb 16 14:01:18 CST 2012
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table test3
     *
     * @abatorgenerated Thu Feb 16 14:01:18 CST 2012
     */
    public List getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table test3
     *
     * @abatorgenerated Thu Feb 16 14:01:18 CST 2012
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table test3
     *
     * @abatorgenerated Thu Feb 16 14:01:18 CST 2012
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table test3
     *
     * @abatorgenerated Thu Feb 16 14:01:18 CST 2012
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table test3
     *
     * @abatorgenerated Thu Feb 16 14:01:18 CST 2012
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Abator for iBATIS.
     * This class corresponds to the database table test3
     *
     * @abatorgenerated Thu Feb 16 14:01:18 CST 2012
     */
    public static class Criteria {
        protected List criteriaWithoutValue;

        protected List criteriaWithSingleValue;

        protected List criteriaWithListValue;

        protected List criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList();
            criteriaWithSingleValue = new ArrayList();
            criteriaWithListValue = new ArrayList();
            criteriaWithBetweenValue = new ArrayList();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List list = new ArrayList();
            list.add(value1);
            list.add(value2);
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List dateList = new ArrayList();
            Iterator iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(((Date)iter.next()).getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return this;
        }

        public Criteria andIdEqualTo(Long value) {
            addCriterion("id =", value, "id");
            return this;
        }

        public Criteria andIdNotEqualTo(Long value) {
            addCriterion("id <>", value, "id");
            return this;
        }

        public Criteria andIdGreaterThan(Long value) {
            addCriterion("id >", value, "id");
            return this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Long value) {
            addCriterion("id >=", value, "id");
            return this;
        }

        public Criteria andIdLessThan(Long value) {
            addCriterion("id <", value, "id");
            return this;
        }

        public Criteria andIdLessThanOrEqualTo(Long value) {
            addCriterion("id <=", value, "id");
            return this;
        }

        public Criteria andIdIn(List values) {
            addCriterion("id in", values, "id");
            return this;
        }

        public Criteria andIdNotIn(List values) {
            addCriterion("id not in", values, "id");
            return this;
        }

        public Criteria andIdBetween(Long value1, Long value2) {
            addCriterion("id between", value1, value2, "id");
            return this;
        }

        public Criteria andIdNotBetween(Long value1, Long value2) {
            addCriterion("id not between", value1, value2, "id");
            return this;
        }

        public Criteria andAIsNull() {
            addCriterion("a is null");
            return this;
        }

        public Criteria andAIsNotNull() {
            addCriterion("a is not null");
            return this;
        }

        public Criteria andAEqualTo(Integer value) {
            addCriterion("a =", value, "a");
            return this;
        }

        public Criteria andANotEqualTo(Integer value) {
            addCriterion("a <>", value, "a");
            return this;
        }

        public Criteria andAGreaterThan(Integer value) {
            addCriterion("a >", value, "a");
            return this;
        }

        public Criteria andAGreaterThanOrEqualTo(Integer value) {
            addCriterion("a >=", value, "a");
            return this;
        }

        public Criteria andALessThan(Integer value) {
            addCriterion("a <", value, "a");
            return this;
        }

        public Criteria andALessThanOrEqualTo(Integer value) {
            addCriterion("a <=", value, "a");
            return this;
        }

        public Criteria andAIn(List values) {
            addCriterion("a in", values, "a");
            return this;
        }

        public Criteria andANotIn(List values) {
            addCriterion("a not in", values, "a");
            return this;
        }

        public Criteria andABetween(Integer value1, Integer value2) {
            addCriterion("a between", value1, value2, "a");
            return this;
        }

        public Criteria andANotBetween(Integer value1, Integer value2) {
            addCriterion("a not between", value1, value2, "a");
            return this;
        }

        public Criteria andBIsNull() {
            addCriterion("b is null");
            return this;
        }

        public Criteria andBIsNotNull() {
            addCriterion("b is not null");
            return this;
        }

        public Criteria andBEqualTo(String value) {
            addCriterion("b =", value, "b");
            return this;
        }

        public Criteria andBNotEqualTo(String value) {
            addCriterion("b <>", value, "b");
            return this;
        }

        public Criteria andBGreaterThan(String value) {
            addCriterion("b >", value, "b");
            return this;
        }

        public Criteria andBGreaterThanOrEqualTo(String value) {
            addCriterion("b >=", value, "b");
            return this;
        }

        public Criteria andBLessThan(String value) {
            addCriterion("b <", value, "b");
            return this;
        }

        public Criteria andBLessThanOrEqualTo(String value) {
            addCriterion("b <=", value, "b");
            return this;
        }

        public Criteria andBLike(String value) {
            addCriterion("b like", value, "b");
            return this;
        }

        public Criteria andBNotLike(String value) {
            addCriterion("b not like", value, "b");
            return this;
        }

        public Criteria andBIn(List values) {
            addCriterion("b in", values, "b");
            return this;
        }

        public Criteria andBNotIn(List values) {
            addCriterion("b not in", values, "b");
            return this;
        }

        public Criteria andBBetween(String value1, String value2) {
            addCriterion("b between", value1, value2, "b");
            return this;
        }

        public Criteria andBNotBetween(String value1, String value2) {
            addCriterion("b not between", value1, value2, "b");
            return this;
        }

        public Criteria andCIsNull() {
            addCriterion("c is null");
            return this;
        }

        public Criteria andCIsNotNull() {
            addCriterion("c is not null");
            return this;
        }

        public Criteria andCEqualTo(Date value) {
            addCriterionForJDBCDate("c =", value, "c");
            return this;
        }

        public Criteria andCNotEqualTo(Date value) {
            addCriterionForJDBCDate("c <>", value, "c");
            return this;
        }

        public Criteria andCGreaterThan(Date value) {
            addCriterionForJDBCDate("c >", value, "c");
            return this;
        }

        public Criteria andCGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("c >=", value, "c");
            return this;
        }

        public Criteria andCLessThan(Date value) {
            addCriterionForJDBCDate("c <", value, "c");
            return this;
        }

        public Criteria andCLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("c <=", value, "c");
            return this;
        }

        public Criteria andCIn(List values) {
            addCriterionForJDBCDate("c in", values, "c");
            return this;
        }

        public Criteria andCNotIn(List values) {
            addCriterionForJDBCDate("c not in", values, "c");
            return this;
        }

        public Criteria andCBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("c between", value1, value2, "c");
            return this;
        }

        public Criteria andCNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("c not between", value1, value2, "c");
            return this;
        }

        public Criteria andDIsNull() {
            addCriterion("d is null");
            return this;
        }

        public Criteria andDIsNotNull() {
            addCriterion("d is not null");
            return this;
        }

        public Criteria andDEqualTo(String value) {
            addCriterion("d =", value, "d");
            return this;
        }

        public Criteria andDNotEqualTo(String value) {
            addCriterion("d <>", value, "d");
            return this;
        }

        public Criteria andDGreaterThan(String value) {
            addCriterion("d >", value, "d");
            return this;
        }

        public Criteria andDGreaterThanOrEqualTo(String value) {
            addCriterion("d >=", value, "d");
            return this;
        }

        public Criteria andDLessThan(String value) {
            addCriterion("d <", value, "d");
            return this;
        }

        public Criteria andDLessThanOrEqualTo(String value) {
            addCriterion("d <=", value, "d");
            return this;
        }

        public Criteria andDLike(String value) {
            addCriterion("d like", value, "d");
            return this;
        }

        public Criteria andDNotLike(String value) {
            addCriterion("d not like", value, "d");
            return this;
        }

        public Criteria andDIn(List values) {
            addCriterion("d in", values, "d");
            return this;
        }

        public Criteria andDNotIn(List values) {
            addCriterion("d not in", values, "d");
            return this;
        }

        public Criteria andDBetween(String value1, String value2) {
            addCriterion("d between", value1, value2, "d");
            return this;
        }

        public Criteria andDNotBetween(String value1, String value2) {
            addCriterion("d not between", value1, value2, "d");
            return this;
        }
    }
}